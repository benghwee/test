package org.example;
import java.io.*;
import java.nio.channels.*;
public class LockManager {
    private FileChannel channel;
    private FileLock lock;
    private final File lockFile;

    public LockManager(String filePath) {
        this.lockFile = new File(filePath);
    }

    // Acquire the lock (blocking)
    public void acquireLock() throws IOException {
        if (!lockFile.exists()) {
            lockFile.createNewFile();
        }
        RandomAccessFile raf = new RandomAccessFile(lockFile, "rw");
        this.channel = raf.getChannel();
        System.out.println("Trying to acquire lock...");
        this.lock = channel.lock(); // blocks until acquired
        System.out.println("Lock acquired.");
    }

    // Release the lock
    public void releaseLock() throws IOException {
        if (lock != null && lock.isValid()) {
            System.out.println("Releasing lock...");
            lock.release();
        }
        if (channel != null && channel.isOpen()) {
            channel.close(); // This also releases the lock if not already
        }
        System.out.println("Lock released.");
    }

    public static void main(String[] args) {
        LockManager lockManager = new LockManager("shared.lock");
        try {
            lockManager.acquireLock();

            // Simulate some exclusive work
            System.out.println("Doing critical work...");
            Thread.sleep(10000);

            lockManager.releaseLock();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
